import pandas as pd

df_bookings = pd.read_csv('hotel_bookings.csv')
  # Identify columns with missing values
cols_with_missing = df_bookings.columns[df_bookings.isnull().any()].tolist()

# Handle missing values
for col in cols_with_missing:
    if df_bookings[col].dtype == 'object':
        df_bookings[col].fillna(df_bookings[col].mode()[0], inplace=True)
    else:
        df_bookings[col].fillna(df_bookings[col].median(), inplace=True)

# Check for duplicate rows and remove them
df_bookings.drop_duplicates(inplace=True)

# Check for inconsistencies in date format (if any)
# Assuming reservation_status_date is a date column
try:
    df_bookings['reservation_status_date'] = pd.to_datetime(df_bookings['reservation_status_date'], format='%d-%m-%y')
except ValueError:
    print("Error converting 'reservation_status_date' to datetime. Check the format.")
# Identify columns with missing values
cols_with_missing = df_bookings.columns[df_bookings.isnull().any()].tolist()

# Handle missing values
for col in cols_with_missing:
    if df_bookings[col].dtype == 'object':
        df_bookings[col] = df_bookings[col].fillna(df_bookings[col].mode()[0])
    else:
        df_bookings[col] = df_bookings[col].fillna(df_bookings[col].median())

# Check for duplicate rows and remove them
df_bookings.drop_duplicates(inplace=True)

# Check for inconsistencies in date format (if any)
# Assuming reservation_status_date is a date column
try:
    df_bookings['reservation_status_date'] = pd.to_datetime(df_bookings['reservation_status_date'], format='%d-%m-%y')
except ValueError:
    print("Error converting 'reservation_status_date' to datetime. Check the format.")
  # Convert 'children' to numeric
df_bookings['children'] = pd.to_numeric(df_bookings['children'], errors='coerce')

# Convert 'agent' and 'company' to string
df_bookings['agent'] = df_bookings['agent'].astype(str)
df_bookings['company'] = df_bookings['company'].astype(str)

# Combine date columns into a datetime column
df_bookings['arrival_date'] = pd.to_datetime(df_bookings[['arrival_date_year', 'arrival_date_month', 'arrival_date_day_of_month']].astype(str).agg('-'.join, axis=1), errors='coerce')

# Create new features
df_bookings['total_guests'] = df_bookings['adults'] + df_bookings['children'] + df_bookings['babies']
df_bookings['total_revenue'] = df_bookings['adr'] * (df_bookings['stays_in_weekend_nights'] + df_bookings['stays_in_week_nights'])

# Assuming there is no booking date information, booking lead time cannot be calculated.
# Calculate total revenue for each month and year
df_revenue_trend = df_bookings.groupby(['arrival_date_year', 'arrival_date_month'])['total_revenue'].sum().reset_index()
  # Calculate the cancellation rate
total_bookings = len(df_bookings)
canceled_bookings = len(df_bookings[df_bookings['is_canceled'] == 1])
cancellation_rate = canceled_bookings / total_bookings

# Store the cancellation rate in a variable or print it
print(f"Cancellation Rate: {cancellation_rate:.2%}")
  # Calculate the number of bookings from each country
df_country_bookings = df_bookings.groupby('country')['hotel'].count().sort_values(ascending=False).reset_index()

# Get the top 10 countries with the most bookings
top_10_countries = df_country_bookings.head(10)
import matplotlib.pyplot as plt

# Create a histogram of booking lead times
plt.figure(figsize=(10, 6))
plt.hist(df_bookings['lead_time'], bins=30, color='skyblue', edgecolor='black')
plt.xlabel('Booking Lead Time (Days)')
plt.ylabel('Number of Bookings')
plt.title('Distribution of Booking Lead Times')
plt.show()
# Calculate average length of stay
average_length_of_stay = df_bookings['stays_in_weekend_nights'] + df_bookings['stays_in_week_nights']
average_length_of_stay = average_length_of_stay.mean()
print(f"Average Length of Stay: {average_length_of_stay:.2f} nights")

# Most popular hotel types
most_popular_hotel_types = df_bookings['hotel'].value_counts()
print("\nMost Popular Hotel Types:\n", most_popular_hotel_types)

# Average daily rate (adr) by month
df_adr_by_month = df_bookings.groupby('arrival_date_month')['adr'].mean().reset_index()
print("\nAverage Daily Rate by Month:\n", df_adr_by_month)
  import matplotlib.pyplot as plt

# 1. Revenue Trends
plt.figure(figsize=(12, 6))
plt.plot(df_revenue_trend['arrival_date_month'], df_revenue_trend['total_revenue'], marker='o')
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.title('Total Revenue Trend Over Time')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# 2. Geographical Distribution
plt.figure(figsize=(10, 6))
plt.barh(top_10_countries['country'], top_10_countries['hotel'])
plt.xlabel('Number of Bookings')
plt.ylabel('Country')
plt.title('Top 10 Countries with Most Bookings')
plt.show()

# 3. Booking Lead Time Distribution
plt.figure(figsize=(10, 6))
plt.hist(df_bookings['lead_time'], bins=30, color='skyblue', edgecolor='black')
plt.xlabel('Booking Lead Time (Days)')
plt.ylabel('Number of Bookings')
plt.title('Distribution of Booking Lead Times')
plt.show()

# 4. Average Daily Rate (ADR) by Month
plt.figure(figsize=(10, 6))
plt.bar(df_adr_by_month['arrival_date_month'], df_adr_by_month['adr'])
plt.xlabel('Month')
plt.ylabel('Average Daily Rate (ADR)')
plt.title('Average Daily Rate by Month')
plt.xticks(rotation=45)
plt.show()
